var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { chain, chunk } from "lodash";
import axios from "axios";
export var publicKeysToMap = function (keys) {
    return keys.reduce(function (acc, cur) {
        acc[cur.toString()] = true;
        return acc;
    }, {});
};
export function rpcRequest(url, body, retries, timeoutSec) {
    if (retries === void 0) { retries = 3; }
    if (timeoutSec === void 0) { timeoutSec = 30; }
    return __awaiter(this, void 0, void 0, function () {
        var data, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, axios.post(url, body, { timeout: timeoutSec * 1000 })];
                case 1:
                    data = (_a.sent()).data;
                    if (data === null || data === void 0 ? void 0 : data.error) {
                        // we want to retry when response has an error
                        throw new Error('Retry');
                    }
                    return [2 /*return*/, data];
                case 2:
                    e_1 = _a.sent();
                    return [2 /*return*/, retries > 0 ? rpcRequest(url, body, retries - 1, timeoutSec) : null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
export function getMultipleAccounts(url, accounts, encoding) {
    if (encoding === void 0) { encoding = 'base64'; }
    return __awaiter(this, void 0, void 0, function () {
        var CHUNK_ACCOUNTS_PER_RPC_CALL, CHUNK_RPC_CALLS, rpcCalls, allCalls, batches, i, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    CHUNK_ACCOUNTS_PER_RPC_CALL = 100;
                    CHUNK_RPC_CALLS = 10;
                    rpcCalls = chunk(accounts, CHUNK_ACCOUNTS_PER_RPC_CALL).map(function (chunk) { return ({
                        jsonrpc: '2.0',
                        id: 42,
                        method: 'getMultipleAccounts',
                        params: [chunk, { encoding: encoding }]
                    }); });
                    allCalls = [];
                    batches = chunk(rpcCalls, CHUNK_RPC_CALLS);
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < batches.length)) return [3 /*break*/, 4];
                    return [4 /*yield*/, Promise.all(batches[i].map(function (chunk) {
                            return rpcRequest(url, chunk);
                        }))];
                case 2:
                    response = _a.sent();
                    allCalls.push(response);
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, chain(allCalls)
                        .flatten()
                        .map(function (response) { return response ? response.result.value : null; })
                        .flatten()
                        .map(function (acc, index) { return acc ? (__assign(__assign({}, acc), { pubkey: accounts[index] })) : null; })
                        .filter(Boolean)
                        .value()];
            }
        });
    });
}
