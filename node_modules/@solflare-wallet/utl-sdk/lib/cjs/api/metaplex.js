"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchTokensMetaplex = void 0;
var js_1 = require("@metaplex-foundation/js");
var mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
var transformers_1 = require("../transformers");
var utils_1 = require("../utils");
var getNftMetadata = function (connection, mints) { return __awaiter(void 0, void 0, void 0, function () {
    var metaplex, nfts;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                metaplex = new js_1.Metaplex(connection);
                return [4 /*yield*/, metaplex.nfts().findAllByMintList(mints)];
            case 1:
                nfts = _a.sent();
                return [2 /*return*/, nfts.filter(function (nft) { return (nft === null || nft === void 0 ? void 0 : nft.tokenStandard) === mpl_token_metadata_1.TokenStandard.Fungible; })];
        }
    });
}); };
var fetchTokensMetaplex = function (_a, mints, onAccountsLoaded) {
    var connection = _a.connection, chainId = _a.chainId, metaplexTimeout = _a.metaplexTimeout;
    if (onAccountsLoaded === void 0) { onAccountsLoaded = function () { return null; }; }
    return __awaiter(void 0, void 0, void 0, function () {
        var accounts, mintsToFetch, decimalsMap, parsedAccounts, promises;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, getNftMetadata(connection, mints)];
                case 1:
                    accounts = _b.sent();
                    mintsToFetch = accounts.map(function (nft) { return nft.mint; });
                    decimalsMap = {};
                    if (!(mintsToFetch.length > 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, (0, utils_1.getMultipleAccounts)(connection.rpcEndpoint, mintsToFetch.map(function (key) { return key.toString(); }), 'jsonParsed')];
                case 2:
                    parsedAccounts = _b.sent();
                    parsedAccounts.forEach(function (_a) {
                        var pubkey = _a.pubkey, data = _a.data;
                        decimalsMap[pubkey] = data.parsed.info.decimals;
                    });
                    _b.label = 3;
                case 3:
                    onAccountsLoaded(accounts.map(function (account) {
                        return (0, transformers_1.transformMetaplexToken)(account, { chainId: chainId, verified: false, source: 'METAPLEX' }, decimalsMap);
                    }));
                    promises = accounts.map(function (nft) { return __awaiter(void 0, void 0, void 0, function () {
                        var abortController_1, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    _b.trys.push([0, 2, , 3]);
                                    abortController_1 = new AbortController();
                                    setTimeout(function () { return abortController_1.abort(); }, metaplexTimeout);
                                    return [4 /*yield*/, nft.metadataTask.run({ signal: abortController_1.signal })];
                                case 1:
                                    _b.sent();
                                    return [2 /*return*/, nft];
                                case 2:
                                    _a = _b.sent();
                                    return [2 /*return*/, nft];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); });
                    return [4 /*yield*/, Promise.all(promises)];
                case 4:
                    _b.sent();
                    return [2 /*return*/, accounts.map(function (account) {
                            return (0, transformers_1.transformMetaplexToken)(account, { chainId: chainId, verified: false, source: 'METAPLEX' }, decimalsMap);
                        })];
            }
        });
    });
};
exports.fetchTokensMetaplex = fetchTokensMetaplex;
